# Step 1: Import Required Libraries
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_digits
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, adjusted_rand_score

sns.set(style="whitegrid")

# Step 2: Load the Digits Dataset
digits = load_digits()
X = digits.data       # shape = (1797, 64)
y = digits.target     # true labels (not used in KMeans)

print("Data shape:", X.shape)


# Step 3: Visualize Some Digits
plt.figure(figsize=(10, 2))
for i in range(10):
    plt.subplot(1, 10, i + 1)
    plt.imshow(digits.images[i], cmap='gray')
    plt.title(y[i])
    plt.axis('off')
plt.suptitle("Sample Digits")
plt.show()


# Step 4: Apply K-Means Clustering
kmeans = KMeans(n_clusters=10, random_state=42)
clusters = kmeans.fit_predict(X)

print("Cluster labels (first 10):", clusters[:10])



# Step 5: Visualize Cluster Centers as Images
fig, axes = plt.subplots(2, 5, figsize=(10, 5))
centers = kmeans.cluster_centers_.reshape(10, 8, 8)

for i, ax in enumerate(axes.flat):
    ax.imshow(centers[i], cmap='gray')
    ax.set_title(f'Cluster {i}')
    ax.axis('off')

plt.suptitle("K-Means Cluster Centers as Images")
plt.show()



# Step 6: Evaluate Clustering (For Learning Only)
cm = confusion_matrix(y, clusters)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix (Clusters vs True Labels)")
plt.show()

# Adjusted Rand Index (0 = random, 1 = perfect)
ari = adjusted_rand_score(y, clusters)
print(f"Adjusted Rand Index: {ari:.3f}")



# Step 7: Visualize with PCA (2D)
from sklearn.decomposition import PCA

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

plt.figure(figsize=(8, 6))
scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='tab10', s=15)
plt.legend(*scatter.legend_elements(), title="Cluster")
plt.title("Digits Clustering with K-Means (PCA-Reduced 2D)")
plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.grid(True)
plt.show()
