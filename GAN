import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt

# Load MNIST and limit dataset
(x_train, _), (_, _) = tf.keras.datasets.mnist.load_data()
x_train = x_train[:10000].astype('float32') / 255.0  # use first 10k images
x_train = np.expand_dims(x_train, axis=-1)

BUFFER_SIZE = 10000
BATCH_SIZE = 64
LATENT_DIM = 100
EPOCHS = 5
SAVE_EVERY = 1  # visualize every epoch

train_dataset = tf.data.Dataset.from_tensor_slices(x_train).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)

# Generator
def make_generator_model():
    model = tf.keras.Sequential([
        layers.Dense(7*7*256, use_bias=False, input_shape=(LATENT_DIM,)),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Reshape((7,7,256)),
        layers.Conv2DTranspose(128, 5, strides=1, padding='same', use_bias=False),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Conv2DTranspose(64, 5, strides=2, padding='same', use_bias=False),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Conv2DTranspose(1, 5, strides=2, padding='same', use_bias=False, activation='tanh')
    ])
    return model

# Discriminator
def make_discriminator_model():
    model = tf.keras.Sequential([
        layers.Conv2D(64, 5, strides=2, padding='same', input_shape=[28,28,1]),
        layers.LeakyReLU(),
        layers.Dropout(0.3),
        layers.Conv2D(128, 5, strides=2, padding='same'),
        layers.LeakyReLU(),
        layers.Dropout(0.3),
        layers.Flatten(),
        layers.Dense(1)
    ])
    return model

generator = make_generator_model()
discriminator = make_discriminator_model()

cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)

def discriminator_loss(real_output, fake_output):
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    return real_loss + fake_loss

def generator_loss(fake_output):
    return cross_entropy(tf.ones_like(fake_output), fake_output)

generator_optimizer = tf.keras.optimizers.Adam(1e-4)
discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)

# Training step
@tf.function
def train_step(images):
    noise = tf.random.normal([BATCH_SIZE, LATENT_DIM])
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
        generated_images = generator(noise, training=True)
        real_output = discriminator(images, training=True)
        fake_output = discriminator(generated_images, training=True)
        gen_loss = generator_loss(fake_output)
        disc_loss = discriminator_loss(real_output, fake_output)
    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))
    return gen_loss, disc_loss

# Visualization
def visualize(epoch):
    noise = tf.random.normal([16, LATENT_DIM])
    generated_images = generator(noise, training=False)
    generated_images = (generated_images + 1)/2.0
    fig, axes = plt.subplots(4,4, figsize=(4,4))
    for i, ax in enumerate(axes.flatten()):
        ax.imshow(generated_images[i,:,:,0], cmap='gray')
        ax.axis('off')
    plt.suptitle(f'Generated Images at Epoch {epoch}')
    plt.show()

# Training loop
def train(dataset, epochs):
    for epoch in range(epochs):
        gen_losses, disc_losses = [], []
        for batch in dataset:
            gl, dl = train_step(batch)
            gen_losses.append(gl.numpy())
            disc_losses.append(dl.numpy())
        print(f'Epoch {epoch+1}, G_loss={np.mean(gen_losses):.4f}, D_loss={np.mean(disc_losses):.4f}')
        visualize(epoch+1)

train(train_dataset, EPOCHS)
