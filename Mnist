import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_digits
from sklearn.model_selection import cross_val_score, cross_val_predict, KFold
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

sns.set(style="whitegrid")




# Load dataset
digits = load_digits()
X = digits.data  # shape = (1797, 64)
y = digits.target  # shape = (1797,)
images = digits.images  # shape = (1797, 8, 8)

print("Shape of data:", X.shape)
print("Unique classes:", np.unique(y))

# Plot first 10 digits
plt.figure(figsize=(10, 2))
for i in range(10):
    plt.subplot(1, 10, i + 1)
    plt.imshow(images[i], cmap='gray')
    plt.title(f'Label: {y[i]}')
    plt.axis('off')
plt.suptitle('Sample Digits from Dataset')
plt.show()





models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'Support Vector Machine': SVC(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'K-Nearest Neighbors': KNeighborsClassifier()
}


kf = KFold(n_splits=5, shuffle=True, random_state=42)



results = []

for name, model in models.items():
    print(f"\nüîç Evaluating: {name}")
    
    # Accuracy using cross-validation
    scores = cross_val_score(model, X, y, cv=kf)
    mean_acc = np.mean(scores)
    print("Cross-Validation Scores:", scores)
    print(f"Mean Accuracy: {mean_acc:.4f}")
    
    # Predictions for evaluation
    y_pred = cross_val_predict(model, X, y, cv=kf)
    
    # Confusion Matrix
    cm = confusion_matrix(y, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=digits.target_names)
    disp.plot(cmap=plt.cm.Blues)
    plt.title(f"Confusion Matrix - {name}")
    plt.show()
    
    # Classification Report
    print("Classification Report:")
    print(classification_report(y, y_pred))
    
    # Save result
    results.append({'Model': name, 'Mean Accuracy': mean_acc})
    


# Visualize model performance
results_df = pd.DataFrame(results)
plt.figure(figsize=(8, 5))
sns.barplot(data=results_df, x='Model', y='Mean Accuracy', palette='viridis')
plt.title("Model Comparison - Mean Accuracy (5-Fold CV)")
plt.ylabel("Accuracy")
plt.ylim(0.9, 1.0)
plt.xticks(rotation=45)
plt.show()
